<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Audio Recorder</title>
	</head>

	<body>
		<button id="startRecording">Start Recording</button>
		<button id="stopRecording">Stop Recording</button>
		<a id="downloadLink" style="display: none">Download Audio</a>

		<!-- The core Firebase JS SDK is always required and must be listed first -->
		<script src="https://www.gstatic.com/firebasejs/8.3.0/firebase-app.js"></script>
		<script src="https://www.gstatic.com/firebasejs/8.3.0/firebase-storage.js"></script>
		<script>
			const startRecordingButton = document.getElementById("startRecording");
			const stopRecordingButton = document.getElementById("stopRecording");
			const downloadLink = document.getElementById("downloadLink");
			let mediaRecorder;
			let audioChunks = [];

			startRecordingButton.addEventListener("click", startRecording);
			stopRecordingButton.addEventListener("click", stopRecording);

			const firebaseConfig = {
				apiKey: "AIzaSyBXA0ZXlNgdgZfKK4yjnmjuQpc78lBAiog",
				authDomain: "hackthenorth-ed2fa.firebaseapp.com",
				projectId: "hackthenorth-ed2fa",
				storageBucket: "hackthenorth-ed2fa.appspot.com",
				messagingSenderId: "95447128297",
				appId: "1:95447128297:web:52a1e7256c70e82b9c7878",
				measurementId: "G-K1TGR981FM",
			};

			// Initialize Firebase
			firebase.initializeApp(firebaseConfig);

			async function startRecording() {
				try {
					const stream = await navigator.mediaDevices.getUserMedia({
						audio: true,
					});

					mediaRecorder = new MediaRecorder(stream);

					mediaRecorder.ondataavailable = (event) => {
						if (event.data.size > 0) {
							audioChunks.push(event.data);
						}
					};

					mediaRecorder.onstop = () => {
						const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
						const ref = firebase.storage().ref();
						const file = audioBlob;
						const name = `${new Date()}-audio.wav`;
						const metadata = {
							contentType: "audio/wav",
						};
						const task = ref.child(name).put(file, metadata);

						task
							.then((snapshot) => snapshot.ref.getDownloadURL())
							.then((url) => {
								console.log(url);
								fetch(`/audio?a=${url}`, {
									method: "GET",
								})
									.then((resp) => {
										return resp.json();
									})
									.then((data) => {
										console.log(data);
									})
									.catch((error) => {
										console.error("Error:", error);
									});
							})
							.catch((err) => console.log(err));
						downloadLink.style.display = "block";
					};

					mediaRecorder.start();

					startRecordingButton.disabled = true;
					stopRecordingButton.disabled = false;
				} catch (error) {
					console.error("Error accessing microphone:", error);
				}
			}

			function stopRecording() {
				if (mediaRecorder && mediaRecorder.state !== "inactive") {
					mediaRecorder.stop();
					audioChunks = [];
					startRecordingButton.disabled = false;
					stopRecordingButton.disabled = true;
				}
			}
		</script>
	</body>
</html>
