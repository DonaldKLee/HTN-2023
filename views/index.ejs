<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Recorder</title>
</head>
<body>
    <button id="startRecording">Start Recording</button>
    <button id="stopRecording">Stop Recording</button>
    <a id="downloadLink" style="display: none">Download Audio</a>
    <script>
        const startRecordingButton = document.getElementById('startRecording');
        const stopRecordingButton = document.getElementById('stopRecording');
        const downloadLink = document.getElementById('downloadLink');
        let mediaRecorder;
        let audioChunks = [];

        startRecordingButton.addEventListener('click', startRecording);
        stopRecordingButton.addEventListener('click', stopRecording);

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = async () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    console.log(audioBlob);
                    const formData = new FormData();
                    formData.append('audio', audioBlob, 'recording.wav');

                    fetch('/upload-audio', {
                        method: 'POST',
                        body: formData,
                    })

                    downloadLink.style.display = 'block';
                };

                mediaRecorder.start();

                startRecordingButton.disabled = true;
                stopRecordingButton.disabled = false;
            } catch (error) {
                console.error('Error accessing microphone:', error);
            }
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
                audioChunks = [];
                startRecordingButton.disabled = false;
                stopRecordingButton.disabled = true;
            }
        }
    </script>
</body>
</html>
